# -*- coding: utf-8 -*-
"""Task-04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r0ElLrht5LV0FY05i1qN5W6mRWVjXJj0
"""

#task 4
def isCycle(graph, n):
    visit_arr = [0] * (n+1)
    curr_dfs = [0] * (n+1)
    for i in range(1, n+1):
        if(visit_arr[i] == 0):
            if(checkCycle(graph, visit_arr, curr_dfs, i) == True):
                return "YES"

    return "NO"

def checkCycle(graph, visit_arr, curr_dfs, vertex):
    visit_arr[vertex] = 1
    curr_dfs[vertex] = 1
    for i in range(len(graph[vertex])):
        if(visit_arr[graph[vertex][i]] == 0):
            if(checkCycle(graph, visit_arr, curr_dfs, graph[vertex][i]) == True):
                 return True

        elif(curr_dfs[graph[vertex][i]] == 1):
            return True

    curr_dfs[vertex] = 0
    return False

def ad_matrix(inp, out):
    n,m = inp.readline().split()
    n = int(n)
    m = int(m)
    matrix = []

    for i in range(n + 1):
        matrix.append([])

    for i in range(m):
        lst = [int(x) for x in inp.readline().split()]
        matrix[lst[0]].append(lst[1])

    s = isCycle(matrix, n)
    print(s)
    out.write(s)

    inp.close()
    out.close()

inp = open("/content/input4.txt", "r")
out = open("/content/output4.txt", "w")
ad_matrix(inp, out)