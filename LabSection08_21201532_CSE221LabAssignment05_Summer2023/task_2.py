# -*- coding: utf-8 -*-
"""task-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-NhdLAjAYxINnFVWvYhyq1x1uquBSnCy
"""

from collections import defaultdict, deque
import heapq

def bfs_order(courses, prerequisites):
    graph = defaultdict(list)
    indegree = [0] * (courses + 1)

    for a, b in sorted(prerequisites):
        graph[a].append(b)
        indegree[b] += 1

    queue = []
    for course in range(1, courses + 1):
        if indegree[course] == 0:
            heapq.heappush(queue, course)

    result = []
    while queue:
        course = heapq.heappop(queue)
        result.append(course)
        for neighbor in sorted(graph[course]):
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                heapq.heappush(queue, neighbor)

    if len(result) != courses:
        return "IMPOSSIBLE"

    return result

inp = open("/content/input2.txt", "r")
out = open("/content/output2.txt", "w")

y = [int(x) for x in inp.readline().split()]
b = []
for i in range(y[1]):
    x = [int(x) for x in inp.readline().split()]
    b.append(tuple(x))
output = bfs_order(y[0], b)
if type(output)==list:
  print(*output, file=out)
else:
  print("IMPOSSIBLE",file=out)
inp.close()
out.close()