# -*- coding: utf-8 -*-
"""task-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ODl22Nn0WoOCkKtpRgx6OaN7atipcyiD
"""

#Task 3

from collections import defaultdict

def kosaraju(graph, N):
    def dfs(node, visited, stack):
        visited[node] = True
        for neighbor in graph[node]:
            if not visited[neighbor]:
                dfs(neighbor, visited, stack)
        stack.append(node)

    def reverse_graph(graph):
        reversed_graph = defaultdict(list)
        for node in graph:
            for neighbor in graph[node]:
                reversed_graph[neighbor].append(node)
        return reversed_graph

    def dfs_scc(node, visited, scc):
        visited[node] = True
        scc.append(node)
        for neighbor in reversed_graph[node]:
            if not visited[neighbor]:
                dfs_scc(neighbor, visited, scc)

    stack = []
    visited = [False] * (N + 1)
    for node in range(1, N + 1):
        if not visited[node]:
            dfs(node, visited, stack)

    reversed_graph = reverse_graph(graph)
    visited = [False] * (N + 1)
    scc_list = []

    while stack:
        node = stack.pop()
        if not visited[node]:
            scc = []
            dfs_scc(node, visited, scc)
            scc_list.append(scc)

    return scc_list

inp = open("/content/input3.txt", "r")
out = open("/content/output3.txt", "w")

y = [int(x) for x in inp.readline().split()]
b = []
for i in range(y[1]):
    x = [int(x) for x in inp.readline().split()]
    b.append(tuple(x))

graph = defaultdict(list)
for u, v in b:
    graph[u].append(v)

scc = kosaraju(graph, y[0])

for i in scc:
  a= sorted(i)
  print(*a,file=out)
inp.close()
out.close()
