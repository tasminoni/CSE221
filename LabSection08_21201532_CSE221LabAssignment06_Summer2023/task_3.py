# -*- coding: utf-8 -*-
"""task-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_j-rueROG6SIySSqLtkPcZaw4hqe2g3e
"""

#task 3
from queue import PriorityQueue

def dijkstra(graph, source):
    inf= float("inf")
    dist_arr = [inf] * len(graph)
    #print(dist_arr)
    dist_arr[source] = 0
    queue = PriorityQueue()
    queue.put((0, source))
    while(queue.empty() != True):
        d, u = queue.get()
        for v in range(len(graph[u])):
            vertex = graph[u][v][0]
            weight = graph[u][v][1]
            maximum = max(d, weight)
            if(maximum < dist_arr[vertex]):
                dist_arr[vertex] = maximum
                queue.put((dist_arr[vertex], vertex))

    return dist_arr

def output(inp, out):
    n, m = inp.readline().split()
    n = int(n)
    m = int(m)
    graph = []
    for i in range(n + 1):
        graph.append([])

    for i in range(m):
        temp = [int(x) for x in inp.readline().split()]
        graph[temp[0]].append((temp[1], temp[2]))

    dist_arr = dijkstra(graph, 1)
    print(dist_arr[-1])
    out.write(str(dist_arr[-1]))

    inp.close()
    out.close()


inp = open("/content/input3.txt", "r")
out = open("/content/output3.txt", "w")
output(inp, out)