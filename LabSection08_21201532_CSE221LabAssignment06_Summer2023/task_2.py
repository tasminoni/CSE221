# -*- coding: utf-8 -*-
"""task-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YQzkN335PMudt_w4zDjXW08gZnTUyecT
"""

#task 2
from queue import PriorityQueue

def dijkstra(graph, source):
    inf= float("inf")
    dist_arr = [inf] * len(graph)
    dist_arr[source] = 0
    queue = PriorityQueue()
    queue.put((0, source))
    while(queue.empty() != True):
        d, u = queue.get()
        for v in range(len(graph[u])):
            vertex = graph[u][v][0]
            weight = graph[u][v][1]
            if(d + weight < dist_arr[vertex]):
                dist_arr[vertex] = d + weight
                queue.put((dist_arr[vertex], vertex))

    return dist_arr

def output(inp, out):
    n, m = inp.readline().split()
    n = int(n)
    m = int(m)
    inf= float("inf")
    graph = []
    for i in range(n + 1):
        graph.append([])

    for i in range(m):
        temp = [int(x) for x in inp.readline().split()]
        graph[temp[0]].append((temp[1], temp[2]))

    alice_source, bob_source = inp.readline().split()
    alice_source = int(alice_source)
    bob_source = int(bob_source)
    alice_dist_arr = dijkstra(graph, alice_source)
    bob_dist_arr = dijkstra(graph, bob_source)

    min_idx = 0
    for i in range(1, len(alice_dist_arr)):
        if(max(alice_dist_arr[i], bob_dist_arr[i]) < max(alice_dist_arr[min_idx], bob_dist_arr[min_idx])):
            min_idx = i

    s = ""
    if(max(alice_dist_arr[min_idx], bob_dist_arr[min_idx]) == inf):
        s += "Impossible"
    else:
        s += f"Time {max(alice_dist_arr[min_idx], bob_dist_arr[min_idx])}\n"
        s += f"Node {min_idx}"

    #print(s)
    out.write(s)

    inp.close()
    out.close()

inp = open("/content/input2.txt", "r")
out = open("/content/output2.txt", "w")
output(inp, out)